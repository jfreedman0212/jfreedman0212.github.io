<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>react-hook-form on Josh Freedman</title><link>https://freedman.dev/tags/react-hook-form/</link><description>Recent content in react-hook-form on Josh Freedman</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 03 Jul 2021 01:42:26 -0400</lastBuildDate><atom:link href="https://freedman.dev/tags/react-hook-form/index.xml" rel="self" type="application/rss+xml"/><item><title>How Should You Handle Form Validation with React Hook Form?</title><link>https://freedman.dev/posts/rhf-validation/</link><pubDate>Sat, 03 Jul 2021 01:42:26 -0400</pubDate><guid>https://freedman.dev/posts/rhf-validation/</guid><description>React Hook Form is a great library for managing form state in React. Getting started with it is simple, integrating with external libraries is (mostly) seamless, and performance optimizations are baked into the library&amp;rsquo;s core design. However, I want to talk about validation in RHF.
In RHF, there are two main ways you define validation rules:
Through passing a rules object to the individual fields (using the register or Controller APIs) Using a schema validation library like Yup or Zod at the root of the form There isn&amp;rsquo;t anything inherently wrong with either of these options, but both approaches are not suitable for all use cases, and there are tradeoffs involved in each decision.</description></item></channel></rss>