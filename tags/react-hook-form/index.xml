<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>react-hook-form on Josh Freedman</title><link>https://jfreedman0212.github.io/tags/react-hook-form/</link><description>Recent content in react-hook-form on Josh Freedman</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Â© Copyright notice</copyright><lastBuildDate>Sat, 03 Jul 2021 01:42:26 -0400</lastBuildDate><atom:link href="https://jfreedman0212.github.io/tags/react-hook-form/index.xml" rel="self" type="application/rss+xml"/><item><title>How Should You Handle Validation Rules with React Hook Form?</title><link>https://jfreedman0212.github.io/posts/rhf-validation/</link><pubDate>Sat, 03 Jul 2021 01:42:26 -0400</pubDate><guid>https://jfreedman0212.github.io/posts/rhf-validation/</guid><description>React Hook Form is a great library for managing form state in React. Getting started with it is simple, integrating with external libraries is (mostly) seamless, and performance optimizations are baked into the library&amp;rsquo;s core design. Like any other good form library, it comes with tools for validating user input. RHF provides you two choices that might seem equivalent, but have different strengths/tradeoffs.
Rules API The Rules API built into React Hook Form is what you&amp;rsquo;re given by default.</description></item></channel></rss>